version: "3.2"

services:
  postgres:
    image: postgres:10.0
    hostname: postgres
    ports:
      - "127.0.0.1:15432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: bard
      POSTGRES_PASSWORD: bard
      POSTGRES_DATABASE: bard

#  redis:
#    image: redis:alpine
#    command: ["redis-server", "--save", "3600", "10"]
#    volumes:
#      - redis-data:/data


  api:
    build:
      context: .
    #image: barddata/bard:${BARD_TAG:-latest}
    command: bard run -h 0.0.0.0 -p 5000 --with-threads --reload --debugger
    ports:
      - "127.0.0.1:5000:5000"
    restart: on-failure
    depends_on:
      - postgres
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - "./bard:/bard/bard"
    environment:
      DAKOBED_DEBUG: "true"
      DAKOBED_PROFILE: "false"
      DAKOBED_SECRET_KEY: "development"
    env_file:
      - bard.env

  ui:
    build:
      context: ui
#    image: dakobedio/dakobed-ui:${DAKOBED_TAG:-latest}
#    depends_on:
#      - api
    command: npm run start
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - "./ui/src:/bardui/src"
      - "./ui/package.json:/bardui/package.json"
    environment:
      PORT: "8080"
      CI: "true"
    env_file:
      - bard.env


volumes:
  archive-data: {}
  postgres-data: {}
  redis-data: {}
  elasticsearch-data: {}

